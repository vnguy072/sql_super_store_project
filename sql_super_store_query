-- SQL super store analysis project 
```sql
    CREATE DATABASE superstore;
```

-- Create table 
```sql
        CREATE TABLE super_store (
        order_id VARCHAR(50) PRIMARY KEY,
        order_date VARCHAR(20),
        ship_date VARCHAR(20),
        customer_id VARCHAR(50),
        customer_name VARCHAR(100),
        segment VARCHAR(50),
        country VARCHAR(50),
        city VARCHAR(50),
        state VARCHAR(50),
        postal_code VARCHAR(20),
        region VARCHAR(50),
        product_id VARCHAR(50),
        category VARCHAR(50),
        sub_category VARCHAR(50),
        product_name VARCHAR(100),
        sales FLOAT,
        quantity INT,
        discount FLOAT,
        profit FLOAT,
        ship_mode VARCHAR(50)
    );
```


-- Data Analysis & Business Key Problems & Answers

-- Q.1 Calculate the overall business metrics: total number of orders, unique customers, total sales, total profit, and average profit margin.
-- Q.2 Find the top 10 products (by product_name) with the highest sales, including quantity sold and profit margin for each.
-- Q.3 Analyze sales, profit, and average order value by customer segment (Consumer, Corporate, Home Office).
-- Q.4 Calculate monthly sales and profit trends over time to identify seasonal patterns and growth trends.
-- Q.5 Analyze sales and profit margin by city and state, identifying the top 5 best-performing states.
-- Q.6 Calculate average shipping time (ship_date - order_date) by ship_mode and city to identify efficiency patterns.
-- Q.7 Analyze the relationship between discounts and profit: compare average profit of discounted vs non-discounted orders by category.
-- Q.8 Rank customers by total sales within each region, showing top 3 customers per state.
-- Q.9 Calculate running total of sales over time (by month) to show cumulative business growth.
-- Q.10 Compare monthly sales with the same month from the previous year and calculate growth percentage.
-- Q.11 Calculate Customer Lifetime Value: total sales, number of orders, and time span from first to last order for each customer.
-- Q.12 Find products that have sales higher than the average sales of their respective category, showing the percentage above category average.
-- Q.13 Identify and analyze loss-making orders (negative profit): count by category and identify patterns and potential root causes.
-- Q.14 Find pairs of sub_categories that are frequently purchased together in the same order_id (simple co-occurrence analysis)
-- Q.15 Create a comprehensive monthly report using CTEs: include sales, profit, top category, top customer segment, and growth rate compared to previous month.


--Q.1 Calculate the overall business metrics: total number of orders, unique customers, total sales, total profit, and average profit margin.

SELECT 
    COUNT(DISTINCT order_id) AS total_orders,
    COUNT(DISTINCT customer_id) AS unique_customers,
    SUM(sales) AS total_sales,
    SUM(profit) AS total_profit,
    SUM(profit) / NULLIF(SUM(sales), 0) AS avg_profit_margin
FROM super_store;

--Q.2 Find the top 10 products (by product_name) with the highest sales, including quantity sold and profit margin for each.

SELECT 
    product_name,
    SUM(sales) AS total_sales,
    SUM(quantity) AS total_quantity,
    SUM(profit) / NULLIF(SUM(sales), 0) AS profit_margin
FROM super_store
GROUP BY product_name
ORDER BY total_sales DESC
LIMIT 10;

--Q.3 Analyze sales, profit, and average order value by customer segment (Consumer, Corporate, Home Office).

SELECT 
    segment,
    SUM(sales) AS total_sales,
    SUM(profit) AS total_profit,
    SUM(sales) / COUNT(order_id) AS average_order_value
FROM super_store
GROUP BY segment;

--Q.4 Calculate monthly sales and profit trends over time to identify seasonal patterns and growth trends.

WITH monthly AS (
    SELECT
        DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
        SUM(sales) AS total_sales,
        SUM(profit) AS total_profit
    FROM super_store
    GROUP BY DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m')
)
SELECT
    month,
    total_sales,
    total_profit,
    LAG(total_sales, 1) OVER (ORDER BY month) AS prev_sales,
    ROUND(
        (total_sales - LAG(total_sales, 1) OVER (ORDER BY month)) 
        / NULLIF(LAG(total_sales, 1) OVER (ORDER BY month), 0) * 100, 
        2
    ) AS sales_growth_pct,
    LAG(total_profit, 1) OVER (ORDER BY month) AS prev_profit,
    ROUND(
        (total_profit - LAG(total_profit, 1) OVER (ORDER BY month)) 
        / NULLIF(LAG(total_profit, 1) OVER (ORDER BY month), 0) * 100, 
        2
    ) AS profit_growth_pct
FROM monthly
ORDER BY month;

--Q.5 Analyze sales and profit margin by city and state, identifying the top 5 best-performing states.

SELECT
    state,
    SUM(sales) AS total_sales,
    SUM(profit) AS total_profit,
    ROUND(SUM(profit) / NULLIF(SUM(sales), 0) * 100, 2) AS profit_margin_pct
FROM super_store
GROUP BY state
ORDER BY profit_margin_pct DESC
LIMIT 5;

--Q.6 Calculate average shipping time (ship_date - order_date) by ship_mode and city to identify efficiency patterns.

SELECT 
    ship_mode,
    city,
    AVG(DATEDIFF(
        STR_TO_DATE(ship_date, '%m/%d/%Y'),
        STR_TO_DATE(order_date, '%m/%d/%Y')
    )) AS avg_shipping_days
FROM super_store
GROUP BY ship_mode, city 
ORDER BY avg_shipping_days;

--Q.7 Analyze the relationship between discounts and profit: compare average profit of discounted vs non-discounted orders by category.

SELECT 
    category,
    CASE WHEN discount > 0 THEN 'Discounted' ELSE 'Non-Discounted' END AS discount_flag,
    ROUND(AVG(profit), 2) AS avg_profit
FROM super_store
GROUP BY category, discount_flag
ORDER BY category, discount_flag;

--Q.8 Rank customers by total sales within each region, showing top 3 customers per state.

WITH customer_sales AS (
    SELECT 
        state,
        customer_name,
        SUM(sales) AS total_sales
    FROM super_store
    GROUP BY state, customer_name
),
ranked AS (
    SELECT 
        state,
        customer_name,
        total_sales,
        RANK() OVER (PARTITION BY state ORDER BY total_sales DESC) AS rnk
    FROM customer_sales
)
SELECT *
FROM ranked
WHERE rnk <= 3
ORDER BY state, rnk, total_sales DESC;

--Q.9 Calculate running total of sales over time (by month) to show cumulative business growth.

WITH monthly_sales AS (
    SELECT 
        DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
        SUM(sales) AS total_sales
    FROM super_store
    GROUP BY DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m')
)
SELECT 
    month,
    total_sales,
    SUM(total_sales) OVER (ORDER BY month) AS running_total_sales
FROM monthly_sales
ORDER BY month;

--Q.10 Compare monthly sales with the same month from the previous year and calculate growth percentage.

WITH monthly_sales AS (
    SELECT 
        YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')) AS year,
        MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month,
        SUM(sales) AS total_sales
    FROM super_store
    GROUP BY YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')), 
             MONTH(STR_TO_DATE(order_date, '%m/%d/%Y'))
)
SELECT 
    year,
    month,
    total_sales,
    LAG(total_sales, 1) OVER (PARTITION BY month ORDER BY year) AS prev_year_sales,
    ROUND(
        (total_sales - LAG(total_sales, 1) OVER (PARTITION BY month ORDER BY year)) 
        / NULLIF(LAG(total_sales, 1) OVER (PARTITION BY month ORDER BY year), 0) * 100, 
        2
    ) AS yoy_growth_pct
FROM monthly_sales
ORDER BY year, month;

--Q.11 Calculate Customer Lifetime Value: total sales, number of orders, and time span from first to last order for each customer.

SELECT 
    customer_id,
    SUM(sales) AS total_sales,
    COUNT(DISTINCT order_id) AS num_orders,
    MIN(STR_TO_DATE(order_date, '%m/%d/%Y')) AS first_order_date,
    MAX(STR_TO_DATE(order_date, '%m/%d/%Y')) AS last_order_date,
    DATEDIFF(    
		MAX(STR_TO_DATE(order_date, '%m/%d/%Y')), 
        MIN(STR_TO_DATE(order_date, '%m/%d/%Y'))
    ) AS time_span_days
FROM super_store
GROUP BY customer_id
ORDER BY total_sales DESC;

--Q.12 Find products that have sales higher than the average sales of their respective category, showing the percentage above category average.

WITH category_avg AS (
    SELECT 
        category,
        AVG(sales) AS avg_cat_sales
    FROM super_store
    GROUP BY category
)
SELECT 
    s.product_id,
    s.product_name,
    s.category,
    SUM(s.sales) AS product_sales,
    c.avg_cat_sales,
    ROUND(
        ((SUM(s.sales) - c.avg_cat_sales) / c.avg_cat_sales) * 100, 2
    ) AS pct_above_avg
FROM super_store s
JOIN category_avg c 
    ON s.category = c.category
GROUP BY s.product_id, s.product_name, s.category, c.avg_cat_sales
HAVING SUM(s.sales) > c.avg_cat_sales
ORDER BY pct_above_avg DESC;
--Q.13 Identify and analyze loss-making orders (negative profit): count by category and identify patterns and potential root causes.

SELECT 
    category,
    COUNT(order_id) AS loss_orders,
    SUM(profit) AS total_loss,
    ROUND(AVG(discount), 2) AS avg_discount
FROM super_store
WHERE profit < 0
GROUP BY category
ORDER BY total_loss ASC;

--Q.14 Find pairs of sub_categories that are frequently purchased together in the same order_id (simple co-occurrence analysis).

SELECT 
    a.sub_category AS subcat_1,
    b.sub_category AS subcat_2,
    COUNT(DISTINCT a.order_id) AS order_count
FROM super_store a
JOIN super_store b 
    ON a.order_id = b.order_id 
   AND a.sub_category < b.sub_category   
GROUP BY a.sub_category, b.sub_category
ORDER BY order_count DESC
LIMIT 10;

--Q.15 Create a comprehensive monthly report using CTEs: include sales, profit, top category, top customer segment, and growth rate compared to previous month.

WITH monthly AS (
    SELECT 
        DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
        SUM(sales) AS total_sales,
        SUM(profit) AS total_profit
    FROM super_store
    GROUP BY DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m')
),
top_category AS (
    SELECT 
        DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
        category,
        SUM(sales) AS cat_sales,
        RANK() OVER (PARTITION BY DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') 
                     ORDER BY SUM(sales) DESC) AS rnk
    FROM super_store
    GROUP BY month, category
),
top_segment AS (
    SELECT 
        DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
        segment,
        SUM(sales) AS seg_sales,
        RANK() OVER (PARTITION BY DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') 
                     ORDER BY SUM(sales) DESC) AS rnk
    FROM super_store
    GROUP BY month, segment
)
SELECT 
    m.month,
    m.total_sales,
    m.total_profit,
    tc.category AS top_category,
    ts.segment AS top_segment,
    ROUND(
        (m.total_sales - LAG(m.total_sales) OVER (ORDER BY m.month)) 
        / NULLIF(LAG(m.total_sales) OVER (ORDER BY m.month), 0) * 100, 
        2
    ) AS growth_rate_pct
FROM monthly m
LEFT JOIN top_category tc ON m.month = tc.month AND tc.rnk = 1
LEFT JOIN top_segment ts ON m.month = ts.month AND ts.rnk = 1
ORDER BY m.month;

